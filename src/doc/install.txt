****** SAF Software Suite ******
***** Configuration and Building *****
Robb Matzke
===============================================================================
****** Table of Contents ******
    * Installation
          * Obtaining_the_Software
          * Unpacking_the_Software
          * Configuration
                * Environment_Variables
                * Configure_Switches
          * Building
          * Testing
          * Installing
    * Development
          * Overview
          * Make_Targets
          * The_Makefile.in_Files
                * Recursion
                * Public_Header_Files
                * Libraries
                * Test_Suite
                * Tools
                * Cleanup
          * Feature_Testing
    * Frequently_Asked_Questions
          * Infinite_loops_during_make
          * Library_not_Rebuilt
          * Debugging_Shared_Libraries
===============================================================================
****** Installation ******
This section describes how one installs the libraries, header files, and tools
of the SAF software suite.
***** Obtaining_the_Software *****
[Not written yet.]
***** Unpacking_the_Software *****
The SAF software suite is distributed as a compressed tar file which will
expand into a directory named like `saf-1.0'. This directory will contain top-
level configuration and documentation and each of the other packages will
appear as a subdirectory.
$ gunzip <saf-1.0 |tar xf -
$ cd saf-1.0
  `Dependencies'
      A file listing the dependencies for the object files whose source files
      are in this directory. All directories have this file although it's empty
      when the directory doesn't contain any source files.
  `Makefile.in'
      The input files that configure uses to generate each `Makefile'. Each
      directory has one of these files.
  `README'
      Instructions for obtaining further instructions.
  `acconfig.h'
      List of potential features available in C source code. The actual list of
      features will be generated by configure and placed in the `include/
      SAFconfig.h' file.
  `aclocal.m4'
      Macros that m4 uses to detect how to build shared libraries.
  `config'
      A directory of configuration-related files.
  `configure'
      The main configuration shell script.
  `configure.in'
      The input used to generate the `configure' script.
  `safapi'
      The SAF API package.
  `doc'
      Top-level documentation. Each package may also have its own
      documentation.
  `dsl'
      The DSL package.
  `include'
      Header files needed to compile various packages. Most of these are
      symlinks to the real header file in the package that defines it.
  `vbt'
      The VBT package.
***** Configuration *****
All SAF software packages can be compiled either within the source tree or in
separate directories. The directory hierarchy where the SAF source code is
located is called the source tree and the directory hierarchy where SAF
software is built is called the build tree. Some advantages of using a build
tree separate from the source tree are that the source tree is not polluted
with generated files, a failed build attempt can be easily cleaned up by
removing the entire build tree, and numerous configurations of SAF can be
compiling simultaneously (such as serial and parallel, debug and production
versions).
To configure SAF software the user should create a build directory (if other
than the root of the SAF source tree) and cd into that directory. Most users
can simply run configure at this point in order to detect characteristics of
the host and compiler and generate the makefiles. However, the behavior of
configure can be influenced with various environment variables and command-line
switches:
Example: the source tree is `/usr/src/saf-1.0' and the build tree is `/tmp/
build/saf-1.0/plain'.
$ mkdir -p /tmp/build/saf-1.0/plain
$ cd /tmp/build/saf-1.0/plain
$ CC=mpicc CPPFLAGS=-I$HOME/include LDFLAGS=-L$HOME/lib \
  /usr/src/saf-1.0/configure --enable-production
Some users like to create a shell script in the root of the source tree so they
don't have to remember all the environment variables and switches. An example
is a shell script called `config.robb' which the author uses:
#!/bin/sh

# Configure is in the same directory as this script.
configure=`echo $0 |sed s/config.robb/configure/`

env \
    CPPFLAGS="$CPPFLAGS -I$HOME/include" \
    LDFLAGS="$LDFLAGS -L$HOME/lib" \
    $configure --prefix=$HOME "$@"
**** Environment_Variables ****
These environment variables affect the behavior of configure:
  CC
      The name of the C compiler. The default is cc or, preferably, gcc. If the
      compiler base name is mpicc or mpcc then parallel versions of all SAF
      software will be created (there are other ways to specify a parallel
      library when a C compiler wrapper is not available).
      $ CC=/usr/local/mpich/bin/mpicc ./configure
      $ CC='cc -n32' ./configure
  CFLAGS
      This variable contains the command-line switches which will be passed to
      the C compiler. Any value specified here will be augmented with
      additional switches detected during the configuration process.
      $ CFLAGS=-fullwarn ./configure
  CPPFLAGS
      These are the command-line switches for the C preprocessor and will be
      supplied to the C compiler in addition to the $CFLAGS value when
      compiling a C source file into an object file.
      $ CPPFLAGS="-DNDEBUG -I/usr/ncsa/include" ./configure
  LDFLAGS
      These are the flags to pass to the linker (via the compiler) in addition
      to the flags determined by configure.
      $ LDFLAGS=-L/usr/ncsa/lib ./configure
  MAKE
      The name of the make command, defaulting to make. All common versions of
      Unix make are supported although certain versions have crippled
      functionality (for instance, Irix make is unable to build SAF software
      when the build tree is other than the source tree, but Irix pmake is
      fully supported). Obviously, if a value other than make is specified then
      the specified version of make must be used to build the software.
  TEST_FILE_PATH
      This is the name of a directory where the test suite will create its test
      files. The default is `.', meaning that each test file will be created in
      the same directory as the test program.
      $ MAKE=gmake ./configure
      $ gmake
**** Configure_Switches ****
These configure switches affect how things are detected:
  --prefix=prefix
      Building the software suite results in headers, libraries, and tools
      which are initially created in the build tree. Issuing the make install
      command will copy these public files to directories named `include',
      `lib', and `bin' under the prefix directory, which must already exist.
      The default prefix is `/usr/local'. The prefix should not be an existing
      directory in the build or source tree. Note: shared libraries must
      generally be installed before they can be used.
      $ ./configure --prefix=$HOME
  --enable-production
      All source code is compiled for debugging by default (no optimizations
      and the `-g' compiler flag specified). Giving this switch will cause
      symbolic debugging to be disabled and full optimizations turned on. It is
      also possible to configure all software for profiling by saying --enable-
      production=profile.
  --with-zlib=incdir,libdir
  --without-zlib
      If HDF5 is one of the packages distributed with the SAF software (as
      opposed to being already installed on the system) then this switch can be
      used to indicate where the ZLIB headers and library are located if
      they're in a nonstandard location. Alternatively, saying --without-zlib
      will prevent HDF5 from using it even when it's installed on the system
      (so applications don't have to link with -lz).
  --enable-shared
      If this switch is supplied then the makefiles will be set up to generate
      both static and shared libraries. Shared libraries have not been tested
      extensively and some systems are unable to link an executable against
      multiple shared libraries unless the libraries have been installed in
      their final home with make install.
  --enable-parallel=style
      Normally a parallel library is built if the CC environment variable
      contains a name recognized as a parallel compiler. However, if such a
      compiler is unavailable then one may turn on the parallel features of the
      library by supplying this option. The only currently valid style is
      `mpich'. The following two commands are equivalent:
      $ CC=mpicc ./configure
      $ ./configure --enable-parallel=mpich
  --help
      This switch will print configure usage information.
***** Building *****
The public header files, libraries, tools, and test suite are built by going to
the top of the build tree and saying make(1). The included packages will be
built from the bottom up and the build will immediately fail if anything goes
wrong.
Individual packages can be compiled by changing directories into the package
(or the package's `lib', `test', or `tools' directories) and saying make at
that point.
***** Testing *****
The entire test suite can be run by going to the top of the build tree and
issuing the make check command. Individual packages may be tested by entering
the appropriate directory and issuing the make check command there. The test
suite will immediately fail if any particular test fails.
***** Installing *****
Although the header files and static libraries can be used directly from the
build tree, it is usually more conventient to install them in a common
location. In fact, some systems require that the shared libraries be installed
before being used.
The make install command will install the public headers, libraries, and tools
of the build tree and can be issued in a subdirectory to install only that
subdirectory and its descendents.
The headers are installed in `prefix/include', the libraries in `prefix/lib',
and the tools in `prefix/bin'. The prefix is either `/usr/local' or the value
specified for the --prefix configure switch.
****** Development ******
This chapter describes how the configuration system works, how it can be used
by developers of SAF software, and how it can be extended.
***** Overview *****
The SAF software suite uses GNU autoconf, which has two halves.The first half
runs on a system with the autoconf tools and generates a portable Bourne shell
script called configure and a pre-header file called `include/SAFconfig.h.in'
which contains the list of potential features. Input files to this phase are
`configure.in' which contains most of the specialization, `aclocal.m4' which
contains various functions including code to detect how to build shared
libraries, and `acconfig.h' which contains C preprocessor definitions for
potential features which are not detected automatically by configure.
The commands autoheader and autoconf are run without arguments in the top of
the source tree (the directory which contains the input files). The graphs
below append an asterisk to indicate executable scripts and bracket generated
files.
Files used in preparing a software package for distribution:
configure.in aclocal.m4 acconfig.h
     |            |          |
     `------------+----------'
                  |
         .--------+------.
         |               |
         v               v
   [configure*]  [SAFconfig.h.in]
The build host does not need the GNU autoconf tools. It runs the portable (but
nearly unreadable) configure script which generates three files: `config.cache'
caches the results from run to run, `config.log' contains information about
things that failed, and `config.status' is a shell script. The final action of
configure is to run config.status, which creates the build tree (if it doesn't
exist) and populates it by creating a `Makefile' in each build directory that
had a `Makefile.in' in the corresponding source directory. The config.status
also creates/updates the `include/SAFconfig.h' file which is included by all
SAF packages and contains the results of the configuration.
Files used in configuring a software package:
[configure*]
     |
     |               [SAFconfig.h.in]  Makefile.in
     |                       |              |
     +---------------.       `-------+------'
     |               +---------.     |
     v               v         v     v
[config.cache]  [config.log]  [config.status*]
                                     |
                              .------+------.
                              |             |
                              v             v
                        [SAFconfig.h]    [Makefile]
In order to reconfigure with different environment variables and/or switches
it's necessary to remove the `config.cache' file first.
***** Make_Targets *****
The following targets are understood in all directories that contain a
makefile:
  all
      This is the default if no target is supplied and results in building all
      libraries, test cases, and tools.
  tests
  tests_here
      This target builds all libraries, tools, and test cases (because the test
      cases depend on the libraries and tools). The tests_here target is not
      recursive.
  _tools
  _tools_here
      This target builds all libraries and tools, but not test cases.(2) The
      _tools_here target is not recursive.
  libs
  libs_here
      This target builds all libraries, public and private, but neither test
      cases nor tools. The libs_here target is not recursive.
  check
  check_here
      This target builds everything and then runs the test suite. The
      check_here target is not recursive.
  install
      This target builds everything and then installs the public headers,
      libraries, and tools in the subdirectories `include', `lib', and `bin' of
      the prefix directory specified to configure with the --prefix= switch.
  uninstall
      This targets removes all public headers, libraries, and tools that were
      installed by make install.
  mostlyclean
      This target removes temporary files without removing final targets. That
      is, it removes things like object files but not libraries or executables.
  clean
      This target removes everything that mostlyclean removes, plus it removes
      libraries, test cases, tools, dependency information, and core dumps.
  distclean
      This target removes everything that clean removes, plus it removes all
      files which were generated on the local system. In other words, the
      source tree should look pretty much like it did when it was first
      unpacked.
  maintainer-clean
      This target removes everything that distclean removes, plus it removes
      all files which are generated from other files. Regenerating the
      necessary files for building may require special tools (such as
      autoconf).
  dep
  depend
  dep_here
  depend_here
      These targets update dependency information for object files. These
      shouldn't have to be run often and never need to be run on GNU systems.
  Makefile
      This target updates the `Makefile' itself, which depends on things like
      the `Makefile.in' and `configure.in'. This target need not be invoked
      explicitly when using GNU make.
Generally speaking, any of these targets can be invoked from any directory and
the recursive versions will recurse into subdirectories.
***** The_Makefile.in_Files *****
Each source directory should have a `Makefile.in' from which the `Makefile'
will be generated. The `Makefile.in' files are intended to be as simple as
possible for the common case and understand three types of objects: libraries,
tests, and tools.
Each `Makefile.in' should begin with
top_srcdir=@top_srcdir@
top_builddir=.
srcdir=@srcdir@
@COMMENCE@
and end with
@CONCLUDE@
The `top_builddir' line should contain the relative path name to the top of the
build tree. If the `Makefile.in' appears in the subdirectory `dsl/lib/datasets'
then the `top_builddir' value should be `../../..'.
Comments in the `Makefile.in' should begin with a double hash (`##') to prevent
them from being interpretted by versions of make that understand C
preprocessor-like directives.
Generally speaking, the @COMMENCE@ line will be substituted with macro
definitions and the @CONCLUDE@ line will be substituted with rules.
**** Recursion ****
If a `Makefile.in' must recurse into subdirectories then those subdirectories
should be listed in the order of recursion as the value of the SUBDIRS macro.
The recursion is in depth-first, postfix order, but certain targets such as
clean will recurse opposite the listed order.
SUBDIRS=lib test tools
**** Public_Header_Files ****
Each `Makefile.in' must be told which header files are public so that it knows
which to install for the make install target. This is done by listing the files
as the value of the PUB_HDR macro.
PUB_HDR=saf.h safP.h error.h
By default, no header files are installed.
**** Libraries ****
Any `Makefile.in' may define a single library which depends on source files in
that directory and below. It does so by giving a library name (without a path)
as the value of the LIB macro. Library names in the makefiles always end with
the `.la' extension since they represent both static and shared libraries.
The library's source and object files are listed in the LIB_SRC macro which can
appear in the same `Makefile.in' as the LIB macro or in `Makefile.in' files in
child directories (the child directories should not define the LIB macro).
LIB=libsafapi.la
LIB_SRC=cat.c coll.c db.c error.c field.c file.c ftempl.c init.c \
	props.c rel.c seq.c set.c state.c stempl.c utils.c
Shared libraries must know what other shared libraries they depend on, and this
is specified with the LDFLAGS and LIBS macros. By default, these macros include
only non-SAF libraries, but they can be overridden in the `Makefile.in' by
replacing them with values from configure. For instance, the `safapi/lib/
Makefile.in' contains:
LIBS=@SAFAPI_LIBS@
LDFLAGS=@SAFAPI_LDFLAGS@
The PKG_LIBS and PKG_LDFLAGS contain the switches required to build shared
libraries of package PKG.
A complete example is the `safapi/lib/Makefile.in':
## SAFAPI library Makefile(.in)
##
## Copyright(C) 1999 The Regents of the University of California.
##     This work  was produced, in  part, at the  University of California, Lawrence Livermore National
##     Laboratory    (UC LLNL)  under    contract number   W-7405-ENG-48 (Contract    48)   between the
##     U.S. Department of Energy (DOE) and The Regents of the University of California (University) for
##     the  operation of UC LLNL.  Copyright  is reserved to  the University for purposes of controlled
##     dissemination, commercialization  through formal licensing, or other  disposition under terms of
##     Contract 48; DOE policies, regulations and orders; and U.S. statutes.  The rights of the Federal
##     Government  are reserved under  Contract 48 subject  to the restrictions agreed  upon by DOE and
##     University.
## 
## Copyright(C) 1999 Sandia Corporation.
##     Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive license for use of this work
##     on behalf of the U.S. Government.  Export  of this program may require a license from the United
##     States Government.
## 
## Disclaimer:
##     This document was  prepared as an account of  work sponsored by an agency  of  the United States
##     Government. Neither the United States  Government nor the United States Department of Energy nor 
##     the  University  of  California  nor  Sandia  Corporation nor any  of their employees  makes any 
##     warranty, expressed  or  implied, or  assumes   any  legal liability  or responsibility  for the 
##     accuracy,  completeness,  or  usefulness  of  any  information, apparatus,  product,  or process 
##     disclosed,  or  represents that its  use would   not infringe  privately owned rights. Reference 
##     herein  to any  specific commercial  product,  process,  or  service by  trade  name, trademark, 
##     manufacturer,  or  otherwise,  does  not   necessarily  constitute  or  imply  its  endorsement, 
##     recommendation, or favoring by the  United States Government   or the University of  California.  
##     The views and opinions of authors expressed herein do not necessarily state  or reflect those of
##     the  United  States Government or  the   University of California   and shall  not be  used  for
##     advertising or product endorsement purposes.
## 
## Authors:
## 	William J. Arrighi	LLNL
## 	Peter K. Espen		SNL
## 	Ray T. Hitt 		SNL
## 	Robb P. Matzke 		LLNL
## 	Mark C. Miller 		LLNL
## 	James F. Reus 		LLNL
## 	Larry A. Schoof 	SNL
## 
## Acknowledgements:
## 	Marty L. Barnaby	SNL - Red parallel perf. study/tuning
## 	David M. Butler		LPS - Data model design/implementation Spec.
## 	Albert K. Cheng		NCSA - Parallel HDF5 support
## 	Nancy Collins		IBM - Alpha/Beta user
## 	Linnea M. Cook		LLNL - Management advocate
## 	Michael J. Folk		NCSA - Management advocate 
## 	Richard M. Hedges	LLNL - Blue-Pacific parallel perf. study/tuning 
## 	Quincey A. Koziol	NCSA - Serial HDF5 Support 
## 	Celeste M. Matarazzo	LLNL - Management advocate
## 	Tom H. Robey 		SNL - Early developer
## 	Greg D. Sjaardema	SNL - Alpha/Beta user
## 	Reinhard W. Stotzer	SNL - Early developer
## 	Judy Sturtevant		SNL - Red parallel perf. study/tuning 
## 	Robert K. Yates		LLNL - Blue-Pacific parallel perf. study/tuning
## 
top_srcdir=@top_srcdir@
top_builddir=../..
srcdir=@srcdir@
@COMMENCE@

# The header files and library to install
PUB_HDR=saf.h safP.h error.h
LIB=libsafapi.la
LIB_SRC= cat.c coll.c db.c error.c field.c file.c ftempl.c init.c \
	 props.c rel.c seq.c set.c state.c stempl.c utils.c

# Override these because libsafapi depends on other SAF libraries
LIBS=@SAFAPI_LIBS@
LDFLAGS=@SAFAPI_LDFLAGS@

@CONCLUDE@
**** Test_Suite ****
The test suite is contained under the `test' directory for each package.(3)
Each `Makefile.in' may contain any number of test cases, each of which has its
source code located in the same directory. As with libraries, the test cases
can be distributed among various directories and the tests will be executed in
a depth-first, postfix order. If any test case fails then the entire make
target immediately fails, so tests should be ordered within a directory from
simplest to most complex.
The TESTS macro lists the names of each of the test programs in run order and
the TEST_SRC and TEST_OBJ macros contain the entire list of test source code
and object files. Generally one will list the source files explicitly and use
pattern replacement to generate the list of object files, which should all end
with the `.lo' extension(4).
TEST_SRC=db1.c db2.c
TEST_OBJ=$(TEST_SRC:.c=.lo)
TESTS=$(TEST_SRC:.c=)

$(TESTS): ../../lib/libsafapi.la

db1: db1.lo
	@$(LT_LINK_EXE) $(CFLAGS) -o $@ db1.lo ../../lib/libsafapi.la \
	    @SAFAPI_LDFLAGS@ @SAFAPI_LIBS@

db2: db2.lo
	@$(LT_LINK_EXE) $(CFLAGS) -o $@ db2.lo ../../lib/libsafapi.la \
	    @SAFAPI_LDFLAGS@ @SAFAPI_LIBS@
As with linking libraries, the PKG_LDFLAGS and PKG_LIBS contain the linker
switches necessary to link any application at the PKG level except for the
libraries at the PKG level itself (which is why `libsafapi.la' is explicit).
The fourth line of the example indicates that all test programs depend on the
safapi library, which causes them to be relinked if the library has been
updated. Although we would like to relink tests if some other library was
updated, we're unable to because we don't know where those libraries are
located (they could be part of the SAF software suite or they might already be
installed on the system).(5)
**** Tools ****
Describing how to build tools is almost identical to describing how to build
the test suite. The difference is that the tools appear in the tools directory
and the different macros are used in the `Makefile.in' to describe them. An
example from the DSL package demonstrates this:
TOOLS=vbtgen
TOOL_SRC=expr.c gen.c genc.c genh.c lexer.c parser.c preproc.c \
         support.c tables.c types.c vbtgen.c
TOOL_OBJ=$(TOOL_SRC:.c=.lo)

## The executables all depend on the dsl library, which in turn depends
## on hdf5, mpio, mpi, z, lm, c, ... Unfortunately we don't know where
## any of these others are, so the best we can do is to depend only on
## dsl.
$(TOOLS): ../../lib/libdsl.la

vbtgen: $(TOOL_OBJ)
	@$(LT_LINK_EXE) $(CFLAGS) -o $@ $(TOOL_OBJ)
This particular case is a directory that contains only one tool, although a
directory in general may contain many tools. Also, vbtgen doesn't use any
special libraries -- a tool that uses libraries would do so in a manner similar
to the test cases.
**** Cleanup ****
Each cleanup target has its own macro which lists additional files to be
removed. The macro has the same name as the target except all upper case. For
instance, if make clean is to remove files called `gen1.out' and `gen2.out'
then those names are listed as:
CLEAN=gen1.out gen2.out
Do not use wildcards to generate a file list.
***** Feature_Testing *****
The `include/SAFconfig.h' file contains information about what features were
detected by configure. Each feature contains a comment that describes its
purpose.
****** Frequently_Asked_Questions ******
***** Infinite_loops_during_make *****
Question: The make commands all enter an infinite loop that seems to be running
autoheader and/or autoconf and those commands are failing. What is the problem
and what can I do to avoid it?
Answer: One of the developers probably updated the `configure.in' file and
failed to run autoheader and/or autoconf to regenerate the `configure' script.
There are a number of ways to work around this:
   1. Use something other than GNU make. The GNU make program is smart enough
      to realize that the `Makefile' depends on other things and attempts to
      rebuilt it when out of date. Since you don't have GNU autoconf tools
      installed on your system (and you shouldn't normally need them) the
      update of the `Makefile' fails and the original `Makefile' is reused,
      resulting in an infinite loop.
   2. Edit the `config/commence.in' and remove the Makefile target near the end
      of that file. Then run config.status (or configure again with same
      arguments) to regenerate all the makefiles.
   3. Touch the `configure' script to make it more recent than the files on
      which it depends.
***** Library_not_Rebuilt *****
Question: If I modify one of the DSL source files and then say make the `*.lo'
file is rebuilt but the `libdsl' is not rebuilt. Why?
Answer: The source files for DSL reside one directory level below the library.
The makefiles at the source level do not understand how to add their objects to
the library because it may not be possible to build a shared library
incrementally during a parallel compile. To build the library run make in the
libraries directory (`dsl/lib' in this case) or above.
***** Debugging_Shared_Libraries *****
Question: How do I debug the SAF test suite or tools when they're linked
against shared versions of SAF libraries? The executables are all shell scripts
that invoke the executable in some complicated manner.
Answer: Install the libraries and tools to a temporary location, then debug
them. The shell script wrappers are necessary in order to load programs that
rely on shared libraries that are not yet installed, and most systems require a
fair amount of work in order to accomplish this. When debugging the test suite
(which isn't normally installed) it's easiest to change the `Makefile' to
install the test suite (or relink the test suite manually against the installed
libraries).
But the best method is to debug against the static libraries and then test the
shared libraries when all debugging is finished. The behavior of the shared
libraries should be the same as for static libraries since they're built at the
same time, with the same configuration flags, and contain the same objects.
===============================================================================
****** Footnotes ******
**** (1) ****
If the MAKE environment variable had a value during the configure step then be
sure to use that command instead of make. This applies to all places where the
make command is used in this documentation.
**** (2) ****
The leading underscore is because tools are in a directory named `tools' and
some brain-dead versions of make refuse to believe that a target might be
something other than a file or directory.
**** (3) ****
The actual directory name is arbitrary but certain names, like `tests', are bad
choices because they conflict with targets in the makefile and some versions of
make are brain-dead enough that it's impossible to make that work properly.
**** (4) ****
The `.lo' extension is to remind us that they refer to both static and shared
object files.
**** (5) ****
We plan to fix this.
===============================================================================
This document was generated on 30 November 1999 using the texi2html translator
version 1.51.
