#!/bin/sh
# Copyright(C) 1999 The Regents of the University of California.
#     This work  was produced, in  part, at the  University of California, Lawrence Livermore National
#     Laboratory    (UC LLNL)  under    contract number   W-7405-ENG-48 (Contract    48)   between the
#     U.S. Department of Energy (DOE) and The Regents of the University of California (University) for
#     the  operation of UC LLNL.  Copyright  is reserved to  the University for purposes of controlled
#     dissemination, commercialization  through formal licensing, or other  disposition under terms of
#     Contract 48; DOE policies, regulations and orders; and U.S. statutes.  The rights of the Federal
#     Government  are reserved under  Contract 48 subject  to the restrictions agreed  upon by DOE and
#     University.
# 
# Copyright(C) 1999 Sandia Corporation.
#     Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive license for use of this work
#     on behalf of the U.S. Government.  Export  of this program may require a license from the United
#     States Government.
# 
# Disclaimer:
#     This document was  prepared as an account of  work sponsored by an agency  of  the United States
#     Government. Neither the United States  Government nor the United States Department of Energy nor 
#     the  University  of  California  nor  Sandia  Corporation nor any  of their employees  makes any 
#     warranty, expressed  or  implied, or  assumes   any  legal liability  or responsibility  for the 
#     accuracy,  completeness,  or  usefulness  of  any  information, apparatus,  product,  or process 
#     disclosed,  or  represents that its  use would   not infringe  privately owned rights. Reference 
#     herein  to any  specific commercial  product,  process,  or  service by  trade  name, trademark, 
#     manufacturer,  or  otherwise,  does  not   necessarily  constitute  or  imply  its  endorsement, 
#     recommendation, or favoring by the  United States Government   or the University of  California.  
#     The views and opinions of authors expressed herein do not necessarily state  or reflect those of
#     the  United  States Government or  the   University of California   and shall  not be  used  for
#     advertising or product endorsement purposes.
# 
# Authors:
# 	William J. Arrighi	LLNL
# 	Peter K. Espen		SNL
# 	Ray T. Hitt 		SNL
# 	Robb P. Matzke 		LLNL
# 	Mark C. Miller 		LLNL
# 	James F. Reus 		LLNL
# 	Larry A. Schoof 	SNL
# 
# Acknowledgements:
# 	Marty L. Barnaby	SNL - Red parallel perf. study/tuning
# 	David M. Butler		LPS - Data model design/implementation Spec.
# 	Albert K. Cheng		NCSA - Parallel HDF5 support
# 	Nancy Collins		IBM - Alpha/Beta user
# 	Linnea M. Cook		LLNL - Management advocate
# 	Michael J. Folk		NCSA - Management advocate 
# 	Richard M. Hedges	LLNL - Blue-Pacific parallel perf. study/tuning 
# 	Quincey A. Koziol	NCSA - Serial HDF5 Support 
# 	Celeste M. Matarazzo	LLNL - Management advocate
# 	Tom H. Robey 		SNL - Early developer
# 	Greg D. Sjaardema	SNL - Alpha/Beta user
# 	Reinhard W. Stotzer	SNL - Early developer
# 	Judy Sturtevant		SNL - Red parallel perf. study/tuning 
# 	Robert K. Yates		LLNL - Blue-Pacific parallel perf. study/tuning
# 


#
# This script was written with the original intent of integrating it into either
# an m4 macro for autconf or configure.in for SAF libs. However, this has proven
# too time consuming. So, this script remains as an extra tool. Use it if 
# configure is taking too long to run due to a number of compiles and tests
# for type sizes.
#
# I have written this macro to speed up the inspection of language specific
# type sizes. On some platforms, compiling and running a test for each type
# seperately can take more than 1 minute per test! This macro tests a bunch
# of types simultaneously. It does this with two compiles and one run. The
# first compile is simply to establish which types the compiler actually
# knows about. Any types that it doesn't know about have their sizes set to
# zero. Any types that it does know about get logged into a second list
# from which a new conftest is generated and run. The output of the run
# is the size of each of the types which is then used to set antoconf's
# variables for these type sizes.
# 
# The output file that is generated, conftestval, is designed to be pasteable
# into a site specific configuration cache file


#
# define the compiler appropriately
#
CC=cc

#
# first pass to build a single .c file with all types in it
#
cat > conftest.c <<EOF
#include <stdio.h>
main()
{
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
EOF
for t in $*
do
  t1=`echo $t | tr '.@' ' *'`
  echo "   fprintf(f, \"sizeof($t1)=%d\\\n\", sizeof($t1));" >> conftest.c
done
echo "exit(0);}" >> conftest.c

#
# now, compile this and cat errors to some output file
#
$CC conftest.c -o conftest 2>conftest.out

#
# now, make a new file, based on types found in the old file
#
cat > conftest.c <<EOF
#include <stdio.h>
main()
{
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
EOF
for t in $*
do
  t1=`echo $t | tr '.@' ' *'`
  t2=`fgrep "$t1" conftest.out | grep ndeclared`
  echo $t2
  t3=`echo $t | tr '.@' '_p'`
  if [ "X$t2" = "X" ]
  then
     echo "   fprintf(f, \"ac_cv_sizeof_$t3=\${ac_cv_sizeof_$t3=%d}\\\n\", sizeof($t1));" >> conftest.c
  else
     echo "   fprintf(f, \"ac_cv_sizeof_$t3=\${ac_cv_sizeof_$t3=0}\\\n\");" >> conftest.c
  fi
done
echo "exit(0);}" >> conftest.c

$CC conftest.c -o conftest 2>conftest.out
t=`cat conftest.out`
if [ "X$t" = "X" ]
then
   conftest
fi
#rm -rf conftest.out conftest.err conftest conftest.o conftest.c
