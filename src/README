## Copyright(C) 1999 The Regents of the University of California.
##     This work  was produced, in  part, at the  University of California, Lawrence Livermore National
##     Laboratory    (UC LLNL)  under    contract number   W-7405-ENG-48 (Contract    48)   between the
##     U.S. Department of Energy (DOE) and The Regents of the University of California (University) for
##     the  operation of UC LLNL.  Copyright  is reserved to  the University for purposes of controlled
##     dissemination, commercialization  through formal licensing, or other  disposition under terms of
##     Contract 48; DOE policies, regulations and orders; and U.S. statutes.  The rights of the Federal
##     Government  are reserved under  Contract 48 subject  to the restrictions agreed  upon by DOE and
##     University.
## 
## Copyright(C) 1999 Sandia Corporation.
##     Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive license for use of this work
##     on behalf of the U.S. Government.  Export  of this program may require a license from the United
##     States Government.
## 
## Disclaimer:
##     This document was  prepared as an account of  work sponsored by an agency  of  the United States
##     Government. Neither the United States  Government nor the United States Department of Energy nor 
##     the  University  of  California  nor  Sandia  Corporation nor any  of their employees  makes any 
##     warranty, expressed  or  implied, or  assumes   any  legal liability  or responsibility  for the 
##     accuracy,  completeness,  or  usefulness  of  any  information, apparatus,  product,  or process 
##     disclosed,  or  represents that its  use would   not infringe  privately owned rights. Reference 
##     herein  to any  specific commercial  product,  process,  or  service by  trade  name, trademark, 
##     manufacturer,  or  otherwise,  does  not   necessarily  constitute  or  imply  its  endorsement, 
##     recommendation, or favoring by the  United States Government   or the University of  California.  
##     The views and opinions of authors expressed herein do not necessarily state  or reflect those of
##     the  United  States Government or  the   University of California   and shall  not be  used  for
##     advertising or product endorsement purposes.
## 
## Authors:
## 	William J. Arrighi	LLNL
## 	Peter K. Espen		SNL
## 	Ray T. Hitt 		SNL
## 	Robb P. Matzke 		LLNL
## 	Mark C. Miller 		LLNL
## 	James F. Reus 		LLNL
## 	Larry A. Schoof 	SNL
## 
## Acknowledgements:
## 	Marty L. Barnaby	SNL - Red parallel perf. study/tuning
## 	David M. Butler		LPS - Data model design/implementation Spec.
## 	Albert K. Cheng		NCSA - Parallel HDF5 support
## 	Nancy Collins		IBM - Alpha/Beta user
## 	Linnea M. Cook		LLNL - Management advocate
## 	Michael J. Folk		NCSA - Management advocate 
## 	Richard M. Hedges	LLNL - Blue-Pacific parallel perf. study/tuning 
## 	Quincey A. Koziol	NCSA - Serial HDF5 Support 
## 	Celeste M. Matarazzo	LLNL - Management advocate
## 	Tom H. Robey 		SNL - Early developer
## 	Greg D. Sjaardema	SNL - Alpha/Beta user
## 	Reinhard W. Stotzer	SNL - Early developer
## 	Judy Sturtevant		SNL - Red parallel perf. study/tuning 
## 	Robert K. Yates		LLNL - Blue-Pacific parallel perf. study/tuning
## 

                           Port for HDF5-1.8.14
                           ====================

In November, 2017, minor modifcations were made so that sslib works with HDF5
version 1.8.14. Various assumptions regarding size of haddr_t and implementation
of the objno member of H5G_stat_t had to be fixed. The release number (3 digit)
was incrimented to 3.

This is the README file for the SAF software suite, which may include one or
more packages from the set: safapi vbt dsl hdf5.  Documentation for each
package may be found in the appropriate subdirectory. Packages which do not
appear in this distribution must be installed independently.

                               DOCUMENTATION
			       =============

The docs directory, saf/docs, if it exists, contains FrameMaker source
documents. If there are files with a .doc extension, they are most likely NOT
MSWord docs (sorry) and are probably FrameMaker 5.5 or greater. There should
also be gzip'd ps files of these documents. There may or may not be an
additional "background" directory in the docs directory with a number of
ancillary FrameMaker and ps files documenting various aspects of the data
model design and software development. We apologize for the state of this
rather important material but making this information user friendly has NOT
been our highest priority.  At the same time, if you have a curiosity, you are
encourage to read it.

The actual reference manual for SAF (and eventually VBT and DSL) is
automatically generated from commentary in the source code. If you have
completed a configure using the configure script (described below), you should
be able to make the documentation with one of these commands:

    Command            Format          Comment
    ================== =============== ===========================
    make refman.html   HTML            Best on-line documentation
    make refman.mif    FrameMaker MIF  Best printed documentation
    make refman.text   Plain text      Simplest format
    make refman.texi   TeXinfo         A hub format
    make refman.ps     PostScript      Requires texi2dvi and dvips
    make refman.info   GNU Info        Requires makeinfo
    make refman.dvi    TeX DVI         Requires texi2dvi
    ================== =============== ===========================

By default the HTML output is in one monolithic file to facilitate
printing. However, it is most useful interactively when it is split into
multiple smaller files. This can be accomplished with the following commands:

  $ mkdir safapi/doc
  $ cd safapi/doc
  $ ../../../tools/mkdoc -a public -E issue -m ../lib/*.[ch] >refman.html


                               INSTALLATION
			       ============

The installation is a multi-step process consisting of

   * detecting characteristics of the host
   * building the libraries, tools, and test suite
   * confidence testing (optional)
   * copying files to their final locations (optional)




		    DETECTING CHARACTERISTICS OF THE HOST
		    =====================================

All packages use GNU autoconf. To detect what features of the host are
available run the `configure' script. It will create a `Makefile' in each
directory.  The configure can be fine tuned with environment variables and/or
command-line switches, but in most cases no tuning should be necessary. (The
HDF5 INSTALL file contains additional details.)

Specifying Final Locations
--------------------------

Due to the way shared libraries are handled on many systems, the final
installation point of the end-products must be specified before things are
compiled. By default this is:

	$(prefix)/lib		-- all static and shared libraries
	$(prefix)/include	-- all public include files
	$(prefix)/bin		-- all tools (1)

By default $(prefix) is `/usr/local' but this can be changed by supplying the
`--prefix=PREFIX' switch to configure. The PREFIX should be the absolute name
of an existing directory which is not part of the SAF source tree.(2)

Environment Variables
---------------------

The following environment variables are understood by configure:

    * MAKE
    	The name of the `make' program (e.g., `gmake'). The default is
    	`make'.

    * CC
    	The name of the C compiler. By default either `cc' or `gcc'. Setting
    	this to `mpicc' or `mpcc' will cause all layers to be compiled for
    	parallel operation.

    * CPPFLAGS
	C preprocessor flags, usually the directories to search for header
	files which are not otherwise known to the preprocessor (e.g.,
	-I$HOME/include).

    * CFLAGS
	C compiler flags used in addition to CPPFLAGS when compiling a source
	file into an object file. Common uses are to turn on/off additional
	warning messages or compiler features.

    * LDFLAGS
	The flags to pass to the C compiler when linking an executable. This
	is normally used to supply directory names to search for libraries
	which the linker cannot otherwise locate (e.g., -L$HOME/lib).

Production vs. Debugging
------------------------

To produce speed-optimized code instead of the default slow, debugging code
specify the `--enable-production' switch.

Serial vs. Parallel Libraries
-----------------------------

The easiest way to compile a parallel library is to specify mpicc or mpcc as
the compiler via the CC environment variable. Failing that, one may specify
`--enable-parallel' and the appropriate CPPFLAGS and LDFLAGS.








		BUILDING THE LIBRARIES, TOOLS, AND TEST SUITE
		=============================================

From the top of the source tree simply say `make' (or whatever command you
specified for the MAKE environment variable to configure) and all libraries,
tools, and test programs will be compiled. They can be used directly from the
source tree.

You can build the objects and libs in a directory different from the sources.
However, this decision is made at "configure" time not "make" time. If
you want to build the objects and libs in a directory other than the source
directory, you must execute configure using a relative path
*from*that*directory*. For example, suppose you create the directories
saf/build/par and saf/build/ser. If you cd into saf/build/par and 
run configure using ../../src/configure, it will build Makefiles and
subdirectories in saf/build/par which make relative references back to the
sources in ../../src. Then, when you run there in saf/build/par, it will
put all the .o files in their appropriate subdirectoreis in saf/build/par.
In this way, you can make many alternately configured versions of the libs
from a single source without having to stamp out another compiled version.





			      CONFIDENCE TESTING
			      ==================

This optional step runs the tests in the test suite for each package and
aborts if any test fails. The testing is initiated by saying `make check' at
the top of the source tree.




		    COPYING FILES TO THEIR FINAL LOCATIONS
		    ======================================

Although the libraries and header files can be used directly out of the source 
tree, it is often more convenient to copy them to the directories that were
indicated by the configure `--prefix=PREFIX' switch. This is done by saying
`make install'.  To uninstall all files say `make uninstall'.





				  FOOTNOTES
				  =========

(1): Currently a few test programs are also installed here.
(2): Actually, one may install into the source tree if a new directory is
     created for the installation, but be warned that moving a shared library
     from one location to another isn't always a simple matter of copying it.
