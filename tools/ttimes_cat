#!/usr/bin/perl

# Copyright(C) 1999 The Regents of the University of California.
#     This work  was produced, in  part, at the  University of California, Lawrence Livermore National
#     Laboratory    (UC LLNL)  under    contract number   W-7405-ENG-48 (Contract    48)   between the
#     U.S. Department of Energy (DOE) and The Regents of the University of California (University) for
#     the  operation of UC LLNL.  Copyright  is reserved to  the University for purposes of controlled
#     dissemination, commercialization  through formal licensing, or other  disposition under terms of
#     Contract 48; DOE policies, regulations and orders; and U.S. statutes.  The rights of the Federal
#     Government  are reserved under  Contract 48 subject  to the restrictions agreed  upon by DOE and
#     University.
#
# Copyright(C) 1999 Sandia Corporation.
#     Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive license for use of this work
#     on behalf of the U.S. Government.  Export  of this program may require a license from the United
#     States Government.
#
# Disclaimer:
#     This document was  prepared as an account of  work sponsored by an agency  of  the United States
#     Government. Neither the United States  Government nor the United States Department of Energy nor 
#     the  University  of  California  nor  Sandia  Corporation nor any  of their employees  makes any 
#     warranty, expressed  or  implied, or  assumes   any  legal liability  or responsibility  for the 
#     accuracy,  completeness,  or  usefulness  of  any  information, apparatus,  product,  or process 
#     disclosed,  or  represents that its  use would   not infringe  privately owned rights. Reference 
#     herein  to any  specific commercial  product,  process,  or  service by  trade  name, trademark, 
#     manufacturer,  or  otherwise,  does  not   necessarily  constitute  or  imply  its  endorsement, 
#     recommendation, or favoring by the  United States Government   or the University of  California.  
#     The views and opinions of authors expressed herein do not necessarily state  or reflect those of
#     the  United  States Government or  the   University of California   and shall  not be  used  for
#     advertising or product endorsement purposes.
#
# Acknowledgements:
#     Robb P. Matzke              LLNL - Author of various tools
#     Mark C. Miller              LLNL - Alpha/Beta user; minor debugging/enhancements 
#     Matthew J. O'Brien          LLNL - Author of various tools
#     James F. Reus               LLNL - Alpha/Beta user

##
# Read an event file and do something. The first switch says what to do, and remaining
# arguments are the names of the file-pairs to process (without the .toc or .data extension).
# See the ttimes_parse script for info on how to turn SAF's tracing output into a suitable format.
#
#  --print:  Print each record to stdout in a human readable format.
#  --stats:  Summarize by event name.
#
require 5.001;
use strict;
my @IDEvent;
my %EventID;

# Convert seconds into a more readable format hh:mm:ss.sss
sub hms {
  my($s) = @_;
  my $h = int($s/3600);
  $s -= $h * 3600;
  my $m = int($s/60);
  $s -= $m * 60;
  return sprintf "%02d:%02d:%06.3f", $h, $m, $s;
}

# Just print each event to stdout
sub do_print {
  my($id,$time) = @_;
  printf "%-40s %8.3f\n", $IDEvent[$id], $time;
}

# Accumulate statistics for each event type
my(@EventStats,%TotalStats);
sub do_stat_each {
  my($id,$time) = @_;
  $EventStats[$id]{ncalls}++;
  $EventStats[$id]{time} += $time;
  $TotalStats{ncalls}++;
  $TotalStats{time} += $time;
}
sub do_stat_last {
  printf "%-40s %8s %24s\n", "Function","NCalls","-- Total Time --    ";
  for my $name (sort keys %EventID) {
    my $stats = $EventStats[$EventID{$name}];
    printf "%-40s %8d %10.3f %13s\n", $name, $stats->{ncalls}, $stats->{time}, hms $stats->{time};
  }
  printf "%-40s %8d %10.3f %13s\n", "Totals:", $TotalStats{ncalls}, $TotalStats{time}, hms $TotalStats{time};
}

# Parse command-line args
my($each,$last) = \&do_print;
while ($ARGV[0] =~ /^--/) {
  $_ = shift;
  /^--print$/ && do {
    ($each,$last) = \&do_print;
    next;
  };
  /^--stats$/ && do {
    ($each,$last) = (\&do_stat_each,\&do_stat_last);
    next;
  };
  die "unknown switch: $_\n";
}

# Read the table of contents and build forward and reverse maps
my $file = $ARGV[0] || "x";
open EVMAP, "$file.toc" or die "$file.toc: $!";
while (<EVMAP>) {
  my($id,$name) = /^(\d+)\s+(.*)/;
  die if defined $IDEvent[$id];
  $IDEvent[$id] = $name;
  $EventID{$name} = $id;
}
close EVMAP;
printf "Table of contents has %d name%s\n", scalar(@IDEvent), 1==@IDEvent?"":"s";

# Process each event
open EVENT, "$file.data" or die "$file.data: $!";
while (sysread EVENT, $_, 6) {
  my($id,$time) = unpack "Sf", $_;
  &$each($id,$time);
}
close EVENT;

# Cleanup
&$last if $last;

