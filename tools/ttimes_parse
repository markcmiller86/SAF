#!/usr/bin/perl

# Copyright(C) 1999 The Regents of the University of California.
#     This work  was produced, in  part, at the  University of California, Lawrence Livermore National
#     Laboratory    (UC LLNL)  under    contract number   W-7405-ENG-48 (Contract    48)   between the
#     U.S. Department of Energy (DOE) and The Regents of the University of California (University) for
#     the  operation of UC LLNL.  Copyright  is reserved to  the University for purposes of controlled
#     dissemination, commercialization  through formal licensing, or other  disposition under terms of
#     Contract 48; DOE policies, regulations and orders; and U.S. statutes.  The rights of the Federal
#     Government  are reserved under  Contract 48 subject  to the restrictions agreed  upon by DOE and
#     University.
#
# Copyright(C) 1999 Sandia Corporation.
#     Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive license for use of this work
#     on behalf of the U.S. Government.  Export  of this program may require a license from the United
#     States Government.
#
# Disclaimer:
#     This document was  prepared as an account of  work sponsored by an agency  of  the United States
#     Government. Neither the United States  Government nor the United States Department of Energy nor 
#     the  University  of  California  nor  Sandia  Corporation nor any  of their employees  makes any 
#     warranty, expressed  or  implied, or  assumes   any  legal liability  or responsibility  for the 
#     accuracy,  completeness,  or  usefulness  of  any  information, apparatus,  product,  or process 
#     disclosed,  or  represents that its  use would   not infringe  privately owned rights. Reference 
#     herein  to any  specific commercial  product,  process,  or  service by  trade  name, trademark, 
#     manufacturer,  or  otherwise,  does  not   necessarily  constitute  or  imply  its  endorsement, 
#     recommendation, or favoring by the  United States Government   or the University of  California.  
#     The views and opinions of authors expressed herein do not necessarily state  or reflect those of
#     the  United  States Government or  the   University of California   and shall  not be  used  for
#     advertising or product endorsement purposes.
#
# Acknowledgements:
#     Robb P. Matzke              LLNL - Author of various tools
#     Mark C. Miller              LLNL - Alpha/Beta user; minor debugging/enhancements 
#     Matthew J. O'Brien          LLNL - Author of various tools
#     James F. Reus               LLNL - Alpha/Beta user

##
# Reads SAF trace files (generated with SAF_TRACING=public,times) and reformats them
# into a much more compact format.  Two files are produced: a table of contents that
# maps a 2-byte event ID number into a name, and the event file itself, with fixed
# size records of the format:
#
#   1. A 2-byte event ID in native byte order. See the table of contents file.
#   2. A native float representing the calculated elapsed time for the event. SAF
#      trace files contain only the starting time of the event and not the elapsed,
#      time, so we calculate the elapsed time as the difference between the start
#      times of two consecutive events. There are two problems with this: (1) the
#      calculated time might include a substantial amount of time spent above SAF,
#      and (2) the last event reported by SAF is discarded because it's not
#      possible to calculate its elapsed time.
#
# The output files are named `x.toc' and `x.data', which are overwritten if they
# already exist.

require 5.001;
use strict;

# The hash of event name to ID
my $NextID=0;
my %EventID;
my $NEvents=0;
my $NDiscard=0;

# Open output files
open EVMAP, ">x.toc" or die "x.toc: $!\n";
open EVENT, ">x.data" or die "x.data: $!\n";

# Process the input file(s).
my($pfunc,$ptime);
while (<ARGV>) {
  my($func,$time) = /^entering (\w+) \[\d+ call @\s*(\d+\.\d+) vc-secs\]$/;
  die $_ unless defined $time;
  $EventID{$func} = $NextID++ unless exists $EventID{$func};
  if (defined $ptime && $ptime<=$time) {
    print EVENT pack "Sf", $EventID{$pfunc}, $time-$ptime;
    $NEvents++;
  } else {
    $NDiscard++;
  }
  ($pfunc,$ptime) = ($func,$time);
}

# Emit index
for my $name (sort keys %EventID) {
  printf EVMAP "%d %s\n", $EventID{$name}, $name;
}

# Close files
close EVMAP;
close EVENT;

# Statistics
printf "Processed %d events with %d unique names\n", $NEvents, $NextID;
printf "Discarded %d additional event%s\n", $NDiscard, 1==$NDiscard?"":"s" if $NDiscard;
